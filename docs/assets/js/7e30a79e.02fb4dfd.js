"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[100],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>f});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(a),m=o,f=p["".concat(s,".").concat(m)]||p[m]||u[m]||r;return a?n.createElement(f,i(i({ref:t},c),{},{components:a})):n.createElement(f,i({ref:t},c))}));function f(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var d=2;d<r;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},6662:(e,t,a)=>{a.r(t),a.d(t,{contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var n=a(7462),o=(a(7294),a(3905));const r={sidebar_position:2},i="Dataform Basics",l={unversionedId:"guides/dataform",id:"guides/dataform",isDocsHomePage:!1,title:"Dataform Basics",description:"This is a just a short overview of Dataform need in the context of the package description. For more details please read official documentation.",source:"@site/docs/guides/dataform.md",sourceDirName:"guides",slug:"/guides/dataform",permalink:"/dataform-ga4-sessions/guides/dataform",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/guides/dataform.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/dataform-ga4-sessions/guides/installation"},next:{title:"Scheduling - Daily updates",permalink:"/dataform-ga4-sessions/guides/scheduling-daily"}},s=[{value:"What is Dataform?",id:"what-is-dataform",children:[]},{value:"How does it work?",id:"how-does-it-work",children:[{value:"SQLX",id:"sqlx",children:[]},{value:"Incremental tables",id:"incremental-tables",children:[]},{value:"ref()",id:"ref",children:[]},{value:"Define sources",id:"define-sources",children:[]},{value:"Dataform project structure",id:"dataform-project-structure",children:[]},{value:"Tags",id:"tags",children:[]}]}],d={toc:s},c="wrapper";function p(e){let{components:t,...a}=e;return(0,o.kt)(c,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"dataform-basics"},"Dataform Basics"),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"This is a just a short overview of Dataform need in the context of the package description. For more details please read ",(0,o.kt)("a",{parentName:"p",href:"https://cloud.google.com/dataform/docs/overview"},"official documentation"),"."))),(0,o.kt)("h2",{id:"what-is-dataform"},"What is Dataform?"),(0,o.kt)("p",null,"A few main facts about Dataform:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"it's a tool for T (transformation) in you ETL (extract, transform, load) processes"),(0,o.kt)("li",{parentName:"ul"},"it's already in BigQuery, you don't need to install anything"),(0,o.kt)("li",{parentName:"ul"},"it's free"),(0,o.kt)("li",{parentName:"ul"},"it uses JavaScript"),(0,o.kt)("li",{parentName:"ul"},"you could create your own package (like this one)"),(0,o.kt)("li",{parentName:"ul"},"it's really cool (and super cool compared to scheduling queries)")),(0,o.kt)("h2",{id:"how-does-it-work"},"How does it work?"),(0,o.kt)("h3",{id:"sqlx"},"SQLX"),(0,o.kt)("p",null,"You should define ",(0,o.kt)("inlineCode",{parentName:"p"},".sqlx")," files with SELECT statement and configuration block (they call them actions). All actions should be inside ",(0,o.kt)("inlineCode",{parentName:"p"},"definitions")," folder or it subfolders."),(0,o.kt)("p",null,"So for example if you create ",(0,o.kt)("inlineCode",{parentName:"p"},"definitions/test.sqlx")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'config {\n    type: "table",\n}\nselect "dataform" as cool_tool\n')),(0,o.kt)("p",null,'And if you run action (by clicking "Start Execution / Actions" and selecting "test") you will get table ',(0,o.kt)("inlineCode",{parentName:"p"},"test")," inside ",(0,o.kt)("inlineCode",{parentName:"p"},"dataform")," dataset with one row and one column full of true."),(0,o.kt)("p",null,"Magic! You just define SELECT and dataform creates table for you. And each time you run action it will recreate table, in our case you will always have only one row with the same result."),(0,o.kt)("p",null,"Of course you could query any BigQuery table in your ",(0,o.kt)("inlineCode",{parentName:"p"},"SELECT")," for example GA4 export tables."),(0,o.kt)("p",null,"Dataform support a few types of actions:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"table"),(0,o.kt)("li",{parentName:"ul"},"incremental table"),(0,o.kt)("li",{parentName:"ul"},"assertion"),(0,o.kt)("li",{parentName:"ul"},"view"),(0,o.kt)("li",{parentName:"ul"},"operation"),(0,o.kt)("li",{parentName:"ul"},"test")),(0,o.kt)("h3",{id:"incremental-tables"},"Incremental tables"),(0,o.kt)("p",null,"In our context the most important type is the ",(0,o.kt)("inlineCode",{parentName:"p"},"incremental"),". Incremental type generate two queries: one for creating tables (",(0,o.kt)("inlineCode",{parentName:"p"},"non-incremental"),") and one for updating tables (",(0,o.kt)("inlineCode",{parentName:"p"},"incremental"),"). For updating Dataform generate INSERT statement and for each run instead of recreating table it adds new rows into the table."),(0,o.kt)("p",null,"If in our example we change action type to ",(0,o.kt)("inlineCode",{parentName:"p"},"incremental"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'config {\n    type: "incremental",\n}\nselect "dataform" as cool_tool\n')),(0,o.kt)("p",null,"And run test action twice we will get table with two rows."),(0,o.kt)("p",null,"So for GA4 data processing it means we could define ",(0,o.kt)("inlineCode",{parentName:"p"},"definitions/sessions.sqlx")," file with ",(0,o.kt)("inlineCode",{parentName:"p"},"SELECT")," statement that queries GA4 raw events only for the last day and returns sessions. The package provides ",(0,o.kt)("inlineCode",{parentName:"p"},"Session")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Event")," classes with ",(0,o.kt)("inlineCode",{parentName:"p"},"publish")," method that generates ",(0,o.kt)("inlineCode",{parentName:"p"},"SELECT")," statement for you. And to keep data fresh you need to run this action every day as soon as GA4 exports data to BigQuery."),(0,o.kt)("p",null,"One more benifit of incremental type, if for provide ",(0,o.kt)("inlineCode",{parentName:"p"},"uniqueKey")," parameter, Dataform will generate ",(0,o.kt)("inlineCode",{parentName:"p"},"MERGE")," statement instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"INSERT"),". The beauty of ",(0,o.kt)("inlineCode",{parentName:"p"},"MERGE")," is that it ",(0,o.kt)("inlineCode",{parentName:"p"},"INSERT")," new values and ",(0,o.kt)("inlineCode",{parentName:"p"},"UPDATE")," existing ones based on ",(0,o.kt)("inlineCode",{parentName:"p"},"uniqueKey"),". It means if for some reason you run the same action twice on the same day - you don't double the same sessions, you just refresh (",(0,o.kt)("inlineCode",{parentName:"p"},"UPDATE"),") them."),(0,o.kt)("p",null,"The package by default creates ",(0,o.kt)("inlineCode",{parentName:"p"},"incremental")," actions with ",(0,o.kt)("inlineCode",{parentName:"p"},"uniqueKey")," parameters ","[",(0,o.kt)("inlineCode",{parentName:"p"},"session_id"),",",(0,o.kt)("inlineCode",{parentName:"p"},"date"),"]"," and ","[",(0,o.kt)("inlineCode",{parentName:"p"},"event_id"),",",(0,o.kt)("inlineCode",{parentName:"p"},"date"),"]"," for sessions and events tables respectively."),(0,o.kt)("p",null,"And also Dataform provides ",(0,o.kt)("a",{parentName:"p",href:"https://cloud.google.com/dataform/docs/reference/dataform-core-reference#itablecontext"},"JavaScript API")," you could use in your actions."),(0,o.kt)("p",null,"One of this helpers is ",(0,o.kt)("inlineCode",{parentName:"p"},"incremental()")," function, that returns ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," when the current context is incremental. And using this function you could select different source tables for the first run and for the next runs, or ",(0,o.kt)("inlineCode",{parentName:"p"},"SELECT")," from all days for the first run and only from the last day for next runs. ",(0,o.kt)("inlineCode",{parentName:"p"},"Session")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Event")," provides ",(0,o.kt)("inlineCode",{parentName:"p"},"incrementalTableName")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"nonIncrementalTableName")," properties to set tables for incremental and non-incremental context."),(0,o.kt)("h3",{id:"ref"},"ref()"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://cloud.google.com/dataform/docs/reference/dataform-core-reference#itablecontext"},"ref()")," is one of the most important Dataform functions. It allows you to reference other actions (table). And the benefit of using it is that Dataform could build dependencies based on ",(0,o.kt)("inlineCode",{parentName:"p"},"ref()")," function. For example, if you create report and want to select data from ",(0,o.kt)("inlineCode",{parentName:"p"},"sessions")," table generated by the package, you could write something like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'config {\n    type: "table",\n}\nSELECT * FROM ${ref("sessions")}\n')),(0,o.kt)("p",null,"And when you run all actions for daily update you don't need to care about execution order. At first Dataform will run ",(0,o.kt)("inlineCode",{parentName:"p"},"sessions")," action and only after that ",(0,o.kt)("inlineCode",{parentName:"p"},"lp_report")," action (because it depends on ",(0,o.kt)("inlineCode",{parentName:"p"},"sessions"),"). So that's why it's important to use ",(0,o.kt)("inlineCode",{parentName:"p"},"ref()")," in all your actions."),(0,o.kt)("h3",{id:"define-sources"},"Define sources"),(0,o.kt)("p",null,"You could use ",(0,o.kt)("inlineCode",{parentName:"p"},"ref()")," to reference all actions created in your Dataform project. But to reference source tables that exist outside of Dataform, you should declare them first."),(0,o.kt)("p",null,"Dataform has a special action for this: ",(0,o.kt)("a",{parentName:"p",href:"https://cloud.google.com/dataform/docs/declare-source"},"declare"),". You could create ",(0,o.kt)("inlineCode",{parentName:"p"},"definitions/sources/ga4.sqlx")," file with the following code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'   config {\n      type: "declaration",\n      schema: "analytics_XXXXXX",\n      name: "events_XXXXXX",\n    }\n')),(0,o.kt)("p",null,"And after thatm you could query from this table like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'select * from ${ref("events_XXXXXX")}\n')),(0,o.kt)("p",null,"The package also expected that sources should be defined first. And it provides a special helper method: ",(0,o.kt)("inlineCode",{parentName:"p"},"declareSources()"),"."),(0,o.kt)("p",null,"So for example you could create ",(0,o.kt)("inlineCode",{parentName:"p"},"definitions/sources/ga4.js")," file with the following code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const ga4 = require("dataform-ga4-sessions");\n// Define your config\nconst config = {\n  dataset: "analytics_XXXXXX",\n  incrementalTableName: "events_XXXXXX",\n};\n// Declare GA4 source tables\nga4.declareSources(config);\n')),(0,o.kt)("p",null,"And after that, you and the package could use ",(0,o.kt)("inlineCode",{parentName:"p"},'ref("events_XXXXXX")')," in the actions."),(0,o.kt)("h3",{id:"dataform-project-structure"},"Dataform project structure"),(0,o.kt)("p",null,"And a few words about Dataform folders. Dataform's documentation provides recomendations about project structure. Inside ",(0,o.kt)("inlineCode",{parentName:"p"},"definitions")," folder you should create subfolders:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"sources")," - for source definitions"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"staging")," - for intermediate tables"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"reporting")," - for reporting tables")),(0,o.kt)("p",null,"It's a good starting point, before you really grow up to dozens of actions."),(0,o.kt)("h3",{id:"tags"},"Tags"),(0,o.kt)("p",null,"One more important Dataform concept is tags. You could add tags to your actions and then run only actions with specific tags. For example you could add ",(0,o.kt)("inlineCode",{parentName:"p"},"staging")," tag to all actions inside ",(0,o.kt)("inlineCode",{parentName:"p"},"staging")," folder and run only them. Or you could add a ",(0,o.kt)("inlineCode",{parentName:"p"},"daily")," tag to all actions you want to run daily."),(0,o.kt)("p",null,"The package by default add tag with source datset name (like ",(0,o.kt)("inlineCode",{parentName:"p"},"analytics_XXXXXX"),") for all actions it creates. The reason behind this is that you could export data from a few GA4 accounts in the same GCP. And in this case, you need to separate configuration and execution for each GA4 account. So you could run only actions for specific GA4 dataset with specific tag (dataset name)."))}p.isMDXComponent=!0}}]);